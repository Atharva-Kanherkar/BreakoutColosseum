 datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

 
enum TournamentStatus {
  DRAFT
  REGISTRATION_OPEN
  REGISTRATION_CLOSED
  ONGOING
  COMPLETED
  CANCELLED
}

// Represents the registered user in the system
model User {
   id                   String                  @id @default(cuid())
  email                String                  @unique
  username             String?
  passwordHash         String
  avatar               String?                 // Add this field
  bio                  String?                 // Add this field
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  supabaseId           String?                 @unique
  isAdmin             Boolean                @default(false)
  // Tournaments hosted by this user
  hostedTournaments    Tournament[]            @relation("HostedTournaments")
  // Tournaments this user is participating in (via TournamentParticipant)
  participation        TournamentParticipant[] @relation("UserParticipants")
  // Tournaments this user is spectating (Direct M2M relation)
  spectatedTournaments Tournament[]            @relation("SpectatedTournaments")
}

// Represents a single tournament event
 model Tournament {
  id                  String           @id @default(cuid())
  name                String
  description         String?
  startDate           DateTime?
  endDate             DateTime?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  status              TournamentStatus @default(DRAFT)
  format              String           @default("SINGLE_ELIMINATION") // Add this field
  registrationDeadline DateTime?       // Add this field
  host                User             @relation("HostedTournaments", fields: [hostId], references: [id])
  hostId              String
  minParticipants     Int?
  maxParticipants     Int?
  teamSize            Int?
  isTeamBased         Boolean          @default(false)

  // Relationships
  participants        TournamentParticipant[] @relation("TournamentParticipants")
  teams               Team[]
  spectators          User[]                  @relation("SpectatedTournaments")

  @@index([hostId])
}

// Represents a User's participation in a specific Tournament
// This acts as a join table with potential extra info
model TournamentParticipant {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Link to the User participating
  user         User       @relation("UserParticipants", fields: [userId], references: [id])
  userId       String

  // Link to the Tournament they are participating in
  tournament   Tournament @relation("TournamentParticipants", fields: [tournamentId], references: [id])
  tournamentId String

  // Link to the Team the participant belongs to (optional, might join later)
  team         Team?      @relation("TeamMembers", fields: [teamId], references: [id])
  teamId       String?

  // Is this participant the captain of their team?
  // We link the captain directly from the Team model for uniqueness.
  // This field could be added for quick checks if needed, but might be redundant.
  // isCaptain    Boolean    @default(false)

  // Ensures a user can only participate once in the same tournament
  @@unique([userId, tournamentId])
  @@index([userId])
  @@index([tournamentId])
  @@index([teamId])
  Team Team[] @relation("TeamCaptain")
}

// Represents a team within a specific tournament
model Team {
  id           String   @id @default(cuid())
  name         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // The tournament this team belongs to
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String

  // The participant who is the captain of this team
  // Note: The captain MUST be a participant in the same tournament.
  captain      TournamentParticipant @relation("TeamCaptain", fields: [captainId], references: [id])
  captainId    String                @unique // A team has only one captain

  // The members of this team (participants)
  members      TournamentParticipant[] @relation("TeamMembers")

  // Ensures team names are unique within a given tournament
  @@unique([name, tournamentId])
  @@index([tournamentId])
}

